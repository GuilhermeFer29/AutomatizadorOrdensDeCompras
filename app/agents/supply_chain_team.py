"""
Team de agentes colaborativos usando Agno 2.1.3 + Google Gemini para an√°lise e recomenda√ß√£o de compras.

MIGRA√á√ÉO COMPLETA PARA GEMINI (2025-10-10):
===========================================

‚úÖ MUDAN√áAS APLICADAS:
1. Removidas TODAS as depend√™ncias OpenAI/OpenRouter (c√≥digo legado eliminado)
2. Importa√ß√£o centralizada do Gemini via app.agents.llm_config
3. Uso exclusivo de get_gemini_llm() para configura√ß√£o do LLM
4. Padroniza√ß√£o de todos os agentes com o mesmo modelo
5. Documenta√ß√£o atualizada e coment√°rios explicativos

üìã STACK ATUAL:
- LLM: Google Gemini 1.5 Pro (models/gemini-1.5-pro-latest)
- Framework: Agno 2.1.3
- Embeddings: Google text-embedding-004 (via rag_service.py)
- Tools: SupplyChainToolkit customizado

üéØ AGENTES ESPECIALIZADOS:
1. Analista de Demanda: Previs√£o e an√°lise de estoque
2. Pesquisador de Mercado: Coleta de pre√ßos e intelig√™ncia competitiva
3. Analista de Log√≠stica: Otimiza√ß√£o de fornecedores e custos
4. Gerente de Compras: S√≠ntese e recomenda√ß√£o final

REFER√äNCIAS:
- Agno Docs: https://docs.agno.com/
- Gemini API: https://ai.google.dev/gemini-api/docs
- Config LLM: app/agents/llm_config.py
"""

from __future__ import annotations

import json
from typing import Dict, Optional

from agno.agent import Agent
from agno.team import Team
from agno.tools import Toolkit

# ‚úÖ IMPORTA√á√ÉO CENTRALIZADA: √önica fonte de configura√ß√£o do LLM
from app.agents.llm_config import get_gemini_llm
from app.agents.tools import SupplyChainToolkit, lookup_product, load_demand_forecast


# Prompts dos agentes especialistas
ANALISTA_DEMANDA_PROMPT = """Voc√™ √© o Analista de Demanda, especialista em previs√£o e an√°lise de estoque.

## Papel e Responsabilidades
Analise os dados de produto e previs√£o de demanda para determinar a necessidade de reposi√ß√£o de estoque.

## Diretrizes de Resili√™ncia
1. Se os dados estiverem incompletos, indique isso na justifica√ß√£o
2. Considere o lead time do fornecedor (se dispon√≠vel) em suas an√°lises
3. Leve em conta a sazonalidade e varia√ß√µes hist√≥ricas
4. Se o estoque atual for superior ao m√≠nimo mas a tend√™ncia for de queda, avalie preemptivamente

## Formato de Sa√≠da
Retorne APENAS um JSON v√°lido com:
```json
{
  "need_restock": boolean,
  "justification": "Explica√ß√£o detalhada baseada nos dados analisados",
  "confidence_level": "high|medium|low"
}
```"""

PESQUISADOR_MERCADO_PROMPT = """Voc√™ √© o Pesquisador de Mercado, especialista em intelig√™ncia competitiva e an√°lise de pre√ßos.

## Papel e Responsabilidades
Coletar e analisar dados atualizados de mercado sobre pre√ßos e fornecedores.

## Diretrizes de Resili√™ncia
1. Se `need_restock` for falso, retorne offers vazio
2. Se o scraping falhar, use tavily_search_results_json para buscar informa√ß√µes contextuais
3. Documente qualquer falha ou limita√ß√£o nos dados coletados
4. Compare os pre√ßos encontrados com hist√≥rico quando dispon√≠vel

## Formato de Sa√≠da
Retorne APENAS um JSON v√°lido com:
```json
{
  "offers": [
    {
      "source": "nome do fornecedor",
      "price": float,
      "currency": "BRL",
      "coletado_em": "timestamp",
      "reliability": "high|medium|low"
    }
  ],
  "market_context": "Informa√ß√µes adicionais sobre o mercado, se houver"
}
```"""

ANALISTA_LOGISTICA_PROMPT = """Voc√™ √© o Analista de Log√≠stica, especialista em otimiza√ß√£o de cadeia de suprimentos.

## Papel e Responsabilidades
Avaliar ofertas de fornecedores considerando custos log√≠sticos, dist√¢ncias e prazos.

## Diretrizes de Resili√™ncia
1. Se n√£o houver coordenadas, estime com base em informa√ß√µes textuais dispon√≠veis
2. Considere n√£o apenas o pre√ßo, mas o custo total de aquisi√ß√£o
3. Avalie a confiabilidade hist√≥rica do fornecedor, se dispon√≠vel
4. Em caso de empate, priorize fornecedores mais pr√≥ximos

## Formato de Sa√≠da
Retorne APENAS um JSON v√°lido com:
```json
{
  "selected_offer": {
    "source": "nome",
    "price": float,
    "estimated_total_cost": float,
    "delivery_time_days": int
  },
  "analysis_notes": "Detalhes sobre a decis√£o e trade-offs considerados",
  "alternatives": ["lista de alternativas vi√°veis"]
}
```"""

GERENTE_COMPRAS_PROMPT = """Voc√™ √© o Gerente de Compras, respons√°vel pela decis√£o final de aquisi√ß√£o.

## Papel e Responsabilidades
Consolidar todas as an√°lises anteriores e produzir uma recomenda√ß√£o final de compra.

## Diretrizes de Resili√™ncia
1. Se houver inconsist√™ncias nos dados, solicite esclarecimentos ou tome decis√£o conservadora
2. Considere o contexto financeiro da empresa (se dispon√≠vel)
3. Avalie riscos (fornecedor √∫nico, volatilidade de pre√ßo, etc.)
4. Se os dados forem insuficientes, recomende a√ß√£o manual

## Formato de Sa√≠da
Retorne APENAS um JSON v√°lido com:
```json
{
  "decision": "approve|reject|manual_review",
  "supplier": "nome do fornecedor ou null",
  "price": float ou null,
  "currency": "BRL",
  "quantity_recommended": int,
  "rationale": "Justificativa detalhada da decis√£o",
  "next_steps": ["lista de a√ß√µes a serem tomadas"],
  "risk_assessment": "Avalia√ß√£o de riscos da opera√ß√£o"
}
```"""


def create_supply_chain_team() -> Team:
    """
    Cria e retorna o Team de an√°lise de cadeia de suprimentos usando Google Gemini.
    
    ‚úÖ ARQUITETURA ATUALIZADA (Agno 2.1.3 + Gemini):
    - LLM: Google Gemini 1.5 Pro (configurado via get_gemini_llm())
    - Framework: Agno 2.1.3 com coordena√ß√£o autom√°tica de agentes
    - Tools: SupplyChainToolkit customizado com 6 ferramentas especializadas
    - Output: JSON estruturado com recomenda√ß√£o de compra
    
    üéØ AGENTES ESPECIALIZADOS:
    1. Analista de Demanda (temp=0.2): Previs√£o e an√°lise de estoque
    2. Pesquisador de Mercado (temp=0.2): Coleta de pre√ßos
    3. Analista de Log√≠stica (temp=0.2): Otimiza√ß√£o de fornecedores
    4. Gerente de Compras (temp=0.1): Decis√£o final (mais determin√≠stico)
    
    Returns:
        Team: Equipe configurada e pronta para an√°lise
        
    Raises:
        ValueError: Se GOOGLE_API_KEY n√£o estiver configurada
    """
    
    # ‚úÖ CONFIGURA√á√ÉO CENTRALIZADA: Uma √∫nica inst√¢ncia do Gemini para todos os agentes
    # Isso garante consist√™ncia e facilita manuten√ß√£o
    print("ü§ñ Configurando agentes com Google Gemini 1.5 Pro...")
    gemini_llm = get_gemini_llm(temperature=0.2)
    gemini_llm_precise = get_gemini_llm(temperature=0.1)  # Mais determin√≠stico para decis√µes finais
    
    # Inicializa o toolkit compartilhado (todas as ferramentas dispon√≠veis)
    toolkit = SupplyChainToolkit()
    
    # ‚úÖ AGENTE 1: Analista de Demanda
    # Respons√°vel por determinar SE precisamos comprar
    analista_demanda = Agent(
        name="AnalistaDemanda",
        description="Especialista em previs√£o de demanda e an√°lise de estoque",
        model=gemini_llm,  # ‚úÖ Usando Gemini configurado centralmente
        instructions=[ANALISTA_DEMANDA_PROMPT],
        tools=[toolkit],
        markdown=True,
    )
    
    # ‚úÖ AGENTE 2: Pesquisador de Mercado
    # Respons√°vel por encontrar ONDE e POR QUANTO comprar
    pesquisador_mercado = Agent(
        name="PesquisadorMercado",
        description="Especialista em intelig√™ncia competitiva e an√°lise de pre√ßos",
        model=gemini_llm,  # ‚úÖ Usando Gemini configurado centralmente
        instructions=[PESQUISADOR_MERCADO_PROMPT],
        tools=[toolkit],
        markdown=True,
    )
    
    # ‚úÖ AGENTE 3: Analista de Log√≠stica
    # Respons√°vel por avaliar QUAL fornecedor √© melhor (custo total)
    analista_logistica = Agent(
        name="AnalistaLogistica",
        description="Especialista em otimiza√ß√£o de cadeia de suprimentos e log√≠stica",
        model=gemini_llm,  # ‚úÖ Usando Gemini configurado centralmente
        instructions=[ANALISTA_LOGISTICA_PROMPT],
        tools=[toolkit],
        markdown=True,
    )
    
    # ‚úÖ AGENTE 4: Gerente de Compras
    # Respons√°vel pela DECIS√ÉO FINAL e s√≠ntese
    gerente_compras = Agent(
        name="GerenteCompras",
        description="Respons√°vel pela decis√£o final de aquisi√ß√£o",
        model=gemini_llm_precise,  # ‚úÖ Temperature mais baixa para decis√µes cr√≠ticas
        instructions=[GERENTE_COMPRAS_PROMPT],
        markdown=True,
    )
    
    # ‚úÖ COORDENA√á√ÉO AUTOM√ÅTICA: Agno 2.1.3 gerencia a ordem de execu√ß√£o
    # O Team executa os agentes na sequ√™ncia ideal automaticamente
    team = Team(
        members=[analista_demanda, pesquisador_mercado, analista_logistica, gerente_compras],
        name="SupplyChainTeam",
        description="Equipe de an√°lise e recomenda√ß√£o de compras usando Google Gemini",
    )
    
    print("‚úÖ Supply Chain Team criado com sucesso (4 agentes especializados)")
    return team


def run_supply_chain_analysis(inquiry: str) -> Dict:
    """
    Fun√ß√£o principal para executar an√°lise de cadeia de suprimentos usando Agno Team.
    
    Esta fun√ß√£o cria a equipe de agentes e executa a an√°lise completa baseada
    na consulta (inquiry) fornecida. O Team coordena automaticamente a execu√ß√£o
    dos agentes especializados.
    
    Args:
        inquiry: Consulta/pergunta sobre a an√°lise de compra (ex: "Analisar compra do SKU_001")
    
    Returns:
        Dicion√°rio com o resultado consolidado da an√°lise
        
    Example:
        >>> result = run_supply_chain_analysis("Preciso comprar 50 unidades do SKU_001")
        >>> print(result["recommendation"]["decision"])
        'approve'
    """
    # Cria e executa o team
    team = create_supply_chain_team()
    response = team.run(inquiry)
    
    # Extrai conte√∫do da resposta
    if hasattr(response, 'content'):
        output_text = response.content
    else:
        output_text = str(response)
    
    # Parse do JSON da resposta
    # O Agno com markdown=True pode envolver JSON em blocos ```json
    if "```json" in output_text:
        json_part = output_text.split("```json")[1]
        if "```" in json_part:
            json_part = json_part.split("```")[0]
        output_text = json_part.strip()
    
    try:
        result = json.loads(output_text)
    except json.JSONDecodeError:
        # Fallback em caso de erro de parsing
        result = {
            "decision": "manual_review",
            "rationale": f"Erro ao processar resposta do team: {output_text[:200]}",
            "supplier": None,
            "price": None,
            "currency": "BRL",
            "quantity_recommended": 0,
            "next_steps": ["Revisar manualmente a an√°lise completa"],
            "risk_assessment": "Dados insuficientes ou formato inv√°lido"
        }
    
    return result


def execute_supply_chain_team(sku: str, inquiry_reason: Optional[str] = None) -> Dict:
    """
    Fun√ß√£o legada/wrapper para manter compatibilidade com o c√≥digo existente.
    
    Carrega dados do produto e delega para run_supply_chain_analysis().
    
    Args:
        sku: SKU do produto a ser analisado
        inquiry_reason: Motivo da consulta (opcional)
    
    Returns:
        Dicion√°rio com o resultado da an√°lise e recomenda√ß√£o
    """
    if not sku.strip():
        raise ValueError("O SKU informado n√£o pode ser vazio.")
    
    # Carrega dados iniciais do produto
    product_data = lookup_product(sku)
    forecast_data = load_demand_forecast(sku)
    
    # Monta o contexto inicial
    context = {
        "product_sku": sku,
        "inquiry_reason": inquiry_reason,
        "product_snapshot": product_data,
        "forecast": forecast_data,
    }
    
    # Monta a mensagem de consulta
    inquiry = f"""Analisar o produto {sku} para decis√£o de compra.

Contexto da an√°lise:
```json
{json.dumps(context, ensure_ascii=False, indent=2)}
```

Execute a an√°lise completa e forne√ßa a recomenda√ß√£o final em JSON v√°lido."""
    
    # Executa a an√°lise usando o team
    recommendation = run_supply_chain_analysis(inquiry)
    
    # Monta o resultado final com estrutura esperada pelo sistema legado
    result = {
        "product_sku": sku,
        "inquiry_reason": inquiry_reason,
        "product_snapshot": product_data,
        "forecast": forecast_data,
        "need_restock": recommendation.get("decision") == "approve",
        "forecast_notes": recommendation.get("rationale", ""),
        "market_prices": recommendation.get("offers", []),
        "logistics_analysis": {
            "selected_offer": recommendation.get("selected_offer"),
            "analysis_notes": recommendation.get("analysis_notes", ""),
        },
        "recommendation": recommendation,
    }
    
    return result


__all__ = ["create_supply_chain_team", "run_supply_chain_analysis", "execute_supply_chain_team"]
