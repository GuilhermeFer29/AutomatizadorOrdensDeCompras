"""
Defini√ß√£o das ferramentas Agno para orquestrar os servi√ßos existentes.

ARQUITETURA H√çBRIDA (2025-10-14):
===================================
‚úÖ ProductCatalogTool: Ferramenta RAG para consultas naturais ao cat√°logo
‚úÖ SupplyChainToolkit: Ferramentas especializadas para an√°lise de supply chain
‚úÖ Integra√ß√£o: Agno (orquestra√ß√£o) + LangChain (RAG) + Google AI (LLM/embeddings)
"""

from __future__ import annotations

import json
import os
from datetime import date, timedelta
from pathlib import Path
from typing import Any, Dict, List, Tuple
from agno.tools import Toolkit
from sqlmodel import Session, select
from app.core.database import engine
from app.ml.prediction import predict_prices_for_product
from app.ml.model_manager import list_trained_models, get_model_info
from app.models.models import Produto, OfertaProduto, Fornecedor, VendasHistoricas
from app.services.rag_service import query_product_catalog_with_google_rag

# Importa√ß√£o condicional do Tavily
try:
    from tavily import TavilyClient
    TAVILY_AVAILABLE = True
except ImportError:
    TAVILY_AVAILABLE = False

ROOT_DIR = Path(__file__).resolve().parents[2]
DEFAULT_FORECAST_HORIZON = 14


# ============================================================================
# PRODUCT CATALOG TOOL - Ponte entre Agno e LangChain RAG
# ============================================================================

class ProductCatalogTool(Toolkit):
    """
    Ferramenta especialista em buscar informa√ß√µes sobre produtos no estoque.
    
    Esta ferramenta √© a ponte entre o Agno Agent e o servi√ßo RAG baseado em LangChain.
    Use-a sempre que a conversa mencionar produtos, seja por nome, SKU ou caracter√≠sticas,
    para verificar estoque, detalhes ou categorias.
    
    QUANDO USAR:
    - Perguntas sobre produtos espec√≠ficos (por nome ou SKU)
    - Consultas de estoque e disponibilidade
    - Informa√ß√µes sobre categorias de produtos
    - Verifica√ß√£o de detalhes t√©cnicos
    - VENDAS HIST√ìRICAS E AN√ÅLISES
    
    ARQUITETURA:
    - Input: Pergunta do usu√°rio em linguagem natural
    - Processamento: LangChain RAG com embeddings Google AI + SQL para vendas
    - Output: Resposta contextualizada baseada no cat√°logo
    """
    
    def __init__(self):
        super().__init__(name="product_catalog")
        self.register(self.get_product_info)
        self.register(self.get_sales_analysis)
    
    def get_product_info(self, user_question: str) -> str:
        """
        Busca informa√ß√µes detalhadas sobre produtos para responder a pergunta do usu√°rio.
        
        Esta ferramenta usa RAG (Retrieval Augmented Generation) para encontrar
        produtos relevantes no cat√°logo e gerar uma resposta precisa e contextual.
        
        Args:
            user_question: A pergunta original e completa do usu√°rio sobre o produto.
                          Exemplos:
                          - "Tem a parafusadeira Makita no estoque?"
                          - "Qual o SKU da serra circular?"
                          - "Quantas furadeiras temos dispon√≠veis?"
                          - "Me fale sobre os produtos da categoria ferramentas el√©tricas"
        
        Returns:
            str: Resposta detalhada e contextualizada sobre o produto, incluindo
                 informa√ß√µes de estoque, SKU, categoria e outras caracter√≠sticas
                 encontradas no cat√°logo.
        
        Example:
            >>> tool = ProductCatalogTool()
            >>> tool.get_product_info("Qual o estoque da parafusadeira Bosch?")
            "A Parafusadeira Bosch GSR 12V (SKU_003) possui atualmente 28 unidades..."
        """
        try:
            print(f"üîß [Product Catalog Tool] Buscando informa√ß√µes para: '{user_question}'")
            
            # Chama o servi√ßo RAG que usa LangChain + Google AI
            response = query_product_catalog_with_google_rag(user_question)
            
            print(f"‚úÖ [Product Catalog Tool] Resposta obtida ({len(response)} chars)")
            return response
            
        except Exception as e:
            error_msg = f"Desculpe, encontrei um erro ao buscar informa√ß√µes: {str(e)}"
            print(f"‚ùå [Product Catalog Tool] Erro: {e}")
            return error_msg
    
    def get_sales_analysis(self, user_question: str) -> str:
        """
        Analisa dados de vendas hist√≥ricas para responder perguntas sobre performance.
        
        Use esta ferramenta quando o usu√°rio perguntar sobre:
        - Produtos mais vendidos (geral ou por per√≠odo)
        - Performance de vendas
        - Hist√≥rico de sa√≠das
        - An√°lises de receita
        
        Args:
            user_question: Pergunta sobre vendas hist√≥ricas
                          Exemplos:
                          - "Qual produto mais vendeu?"
                          - "Top 5 produtos por receita"
                          - "Produtos que mais sa√≠ram na Black Friday"
        
        Returns:
            str: An√°lise detalhada das vendas com produtos ranqueados
        """
        try:
            print(f"üìä [Sales Analysis Tool] Analisando vendas: '{user_question}'")
            
            with Session(engine) as session:
                # Query SQL para produtos mais vendidos (all time)
                from sqlalchemy import func, desc
                
                query = (
                    select(
                        Produto.sku,
                        Produto.nome,
                        Produto.categoria,
                        Produto.estoque_atual,
                        func.sum(VendasHistoricas.quantidade).label('total_vendido'),
                        func.sum(VendasHistoricas.receita).label('receita_total')
                    )
                    .join(VendasHistoricas, Produto.id == VendasHistoricas.produto_id)
                    .group_by(Produto.id)
                    .order_by(desc('total_vendido'))
                    .limit(10)
                )
                
                results = session.exec(query).all()
                
                if not results:
                    return "N√£o encontrei dados de vendas no sistema."
                
                # Formata resposta
                response = "## üìà Top Produtos por Volume de Vendas\n\n"
                
                for idx, row in enumerate(results, 1):
                    response += f"### {idx}. {row.nome}\n"
                    response += f"- **SKU**: {row.sku}\n"
                    response += f"- **Categoria**: {row.categoria}\n"
                    response += f"- **Total Vendido**: {row.total_vendido:,} unidades\n"
                    response += f"- **Receita Total**: R$ {row.receita_total:,.2f}\n"
                    response += f"- **Estoque Atual**: {row.estoque_atual} unidades\n"
                    response += "\n"
                
                print(f"‚úÖ [Sales Analysis Tool] {len(results)} produtos analisados")
                return response
                
        except Exception as e:
            error_msg = f"Erro ao analisar vendas: {str(e)}"
            print(f"‚ùå [Sales Analysis Tool] Erro: {e}")
            import traceback
            traceback.print_exc()
            return error_msg


# ============================================================================
# SUPPLY CHAIN TOOLKIT - Ferramentas especializadas
# ============================================================================

def _load_product_by_sku(sku: str) -> Produto:
    with Session(engine) as session:
        produto = session.exec(select(Produto).where(Produto.sku == sku)).first()
        if not produto:
            raise ValueError(f"Produto com SKU '{sku}' n√£o encontrado.")
        session.expunge(produto)
        return produto


def _load_product_metadata(sku: str) -> Tuple[Dict[str, float], str | None]:
    """Carrega metadados do modelo de um produto espec√≠fico."""
    try:
        model_info = get_model_info(sku)
        if not model_info.get("exists"):
            return {}, None
        
        metrics = model_info.get("metrics", {})
        trained_at = model_info.get("trained_at")
        return metrics, trained_at
    except Exception:
        return {}, None


class SupplyChainToolkit(Toolkit):
    """Toolkit com ferramentas para an√°lise de cadeia de suprimentos."""
    
    def __init__(self):
        super().__init__(name="supply_chain_toolkit")
        self.register(self.lookup_product)
        self.register(self.load_demand_forecast)
        self.register(self.compute_distance)
        
        # Adiciona Tavily (recomendado para buscas contextuais)
        if TAVILY_AVAILABLE and os.getenv("TAVILY_API_KEY"):
            self.register(self.tavily_search)
    
    def lookup_product(self, sku: str) -> str:
        """Recupera metadados cadastrados de um produto espec√≠fico.

        Args:
            sku: O SKU √∫nico do produto.
        
        Returns:
            JSON com dados do produto (id, sku, nome, estoque_atual, estoque_minimo, categoria).
        """
        try:
            produto = _load_product_by_sku(sku)
            result = {
                "id": produto.id,
                "sku": produto.sku,
                "nome": produto.nome,
                "estoque_atual": produto.estoque_atual,
                "estoque_minimo": produto.estoque_minimo,
                "categoria": produto.categoria,
                "atualizado_em": produto.atualizado_em.isoformat() if produto.atualizado_em else None,
            }
            return json.dumps(result, ensure_ascii=False)
        except Exception as e:
            return json.dumps({"error": str(e)})

    def load_demand_forecast(self, sku: str, horizon_days: int = DEFAULT_FORECAST_HORIZON) -> str:
        """Carrega previs√µes futuras usando o modelo global LightGBM.

        Args:
            sku: O SKU √∫nico do produto.
            horizon_days: Quantidade de dias futuros para a previs√£o de demanda (padr√£o: 14).
        
        Returns:
            JSON com a previs√£o de demanda.
        """
        try:
            produto = _load_product_by_sku(sku)
            result = predict_prices_for_product(sku=produto.sku, days_ahead=horizon_days)
            
            if "error" in result:
                return json.dumps({"error": result["error"]})
            
            values = result.get("prices", [])
            dates = result.get("dates", [])
            
            forecast_payload = [
                {
                    "date": date_str,
                    "predicted": float(price),
                }
                for date_str, price in zip(dates, values)
            ]

            metrics, trained_at = _load_product_metadata(sku)

            result = {
                "produto_id": produto.id,
                "sku": produto.sku,
                "modelo": "LightGBM_Global",
                "treinado_em": trained_at,
                "metricas": metrics,
                "horizon_days": horizon_days,
                "forecast": forecast_payload,
            }
            return json.dumps(result, ensure_ascii=False)
        except Exception as e:
            return json.dumps({"error": str(e)})

    def tavily_search(self, query: str) -> str:
        """Busca informa√ß√µes atualizadas na web sobre fornecedores, tend√™ncias de mercado.

        Args:
            query: Termo de busca.
        
        Returns:
            Resultados da busca na web.
        """
        try:
            api_key = os.getenv("TAVILY_API_KEY")
            if not api_key:
                return "Tavily API key n√£o configurada."
            
            client = TavilyClient(api_key=api_key)
            response = client.search(query, max_results=3)
            
            results = []
            for result in response.get("results", []):
                results.append({
                    "title": result.get("title"),
                    "url": result.get("url"),
                    "content": result.get("content", "")[:300]
                })
            
            return json.dumps(results, ensure_ascii=False)
        except Exception as e:
            return json.dumps({"error": str(e)})

    def compute_distance(self, lat1: float, lon1: float, lat2: float, lon2: float) -> str:
        """Calcula dist√¢ncia entre dois pontos geogr√°ficos (em km).

        Args:
            lat1, lon1: Coordenadas do ponto 1
            lat2, lon2: Coordenadas do ponto 2
        
        Returns:
            JSON com dist√¢ncia calculada
        """
        from math import radians, sin, cos, sqrt, atan2
        
        # Haversine formula
        R = 6371  # Raio da Terra em km
        
        lat1_rad, lon1_rad = radians(lat1), radians(lon1)
        lat2_rad, lon2_rad = radians(lat2), radians(lon2)
        
        dlat = lat2_rad - lat1_rad
        dlon = lon2_rad - lon1_rad
        
        a = sin(dlat/2)**2 + cos(lat1_rad) * cos(lat2_rad) * sin(dlon/2)**2
        c = 2 * atan2(sqrt(a), sqrt(1-a))
        distance = R * c
        
        return json.dumps({"distance_km": round(distance, 2)})


# ============================================================================
# FERRAMENTAS AVAN√áADAS - Fase 2: Capacita√ß√£o dos Agentes
# ============================================================================

def get_price_forecast_for_sku(sku: str, days_ahead: int = 7) -> str:
    """
    Use esta ferramenta para obter a previs√£o de pre√ßos futuros para um SKU espec√≠fico.
    
    Args:
        sku: SKU do produto
        days_ahead: N√∫mero de dias √† frente (padr√£o: 7)
    
    Returns:
        JSON com previs√µes de pre√ßo, datas e m√©tricas do modelo
    """
    try:
        result = predict_prices_for_product(sku=sku, days_ahead=days_ahead)
        
        if "error" in result:
            return json.dumps({"error": result["error"]})
        
        # Calcular tend√™ncia
        prices = result.get("prices", [])
        if len(prices) >= 2:
            trend = "alta" if prices[-1] > prices[0] else "baixa"
            var_percent = ((prices[-1] - prices[0]) / prices[0]) * 100
        else:
            trend = "est√°vel"
            var_percent = 0.0
        
        return json.dumps({
            "sku": sku,
            "previsoes": result.get("prices", []),
            "datas": result.get("dates", []),
            "tendencia": trend,
            "variacao_percentual": round(var_percent, 2),
            "modelo_usado": result.get("model_used", "desconhecido"),
            "metricas": result.get("metrics", {})
        }, ensure_ascii=False)
    except Exception as e:
        return json.dumps({"error": str(e)}, ensure_ascii=False)


def search_market_trends_for_product(product_name: str) -> str:
    """
    Use esta ferramenta para pesquisar na web por not√≠cias, artigos e an√°lises 
    de mercado recentes que possam influenciar o pre√ßo de um produto.
    
    Args:
        product_name: Nome do produto ou categoria
    
    Returns:
        JSON com resultados da pesquisa de mercado
    """
    try:
        api_key = os.getenv("TAVILY_API_KEY")
        if not api_key:
            return json.dumps({
                "error": "Tavily API key n√£o configurada",
                "info": "Configure a vari√°vel de ambiente TAVILY_API_KEY"
            }, ensure_ascii=False)
        
        if not TAVILY_AVAILABLE:
            return json.dumps({
                "error": "Tavily n√£o dispon√≠vel",
                "info": "Instale com: pip install tavily-python"
            }, ensure_ascii=False)
        
        # Construir query otimizada para pesquisa de tend√™ncias
        query = f"not√≠cias e tend√™ncias de pre√ßo para {product_name} em 2025"
        
        client = TavilyClient(api_key=api_key)
        response = client.search(query, max_results=5, search_depth="advanced")
        
        insights = []
        for result in response.get("results", []):
            insights.append({
                "titulo": result.get("title"),
                "fonte": result.get("url"),
                "resumo": result.get("content", "")[:400],
                "score": result.get("score", 0.0)
            })
        
        return json.dumps({
            "produto": product_name,
            "total_resultados": len(insights),
            "insights": insights,
            "query_usada": query
        }, ensure_ascii=False)
        
    except Exception as e:
        return json.dumps({"error": str(e)}, ensure_ascii=False)


def find_supplier_offers_for_sku(sku: str) -> str:
    """
    Use esta ferramenta para encontrar todas as ofertas de fornecedores 
    para um produto espec√≠fico, ordenadas por melhor pre√ßo.
    
    Args:
        sku: SKU do produto
    
    Returns:
        JSON com ofertas de fornecedores (pre√ßo, confiabilidade, prazo)
    """
    try:
        with Session(engine) as session:
            # Buscar produto
            produto = session.exec(select(Produto).where(Produto.sku == sku)).first()
            if not produto:
                return json.dumps({
                    "error": f"Produto com SKU '{sku}' n√£o encontrado"
                }, ensure_ascii=False)
            
            # Buscar ofertas com join nos fornecedores
            from sqlmodel import select
            
            ofertas = session.exec(
                select(OfertaProduto, Fornecedor)
                .where(OfertaProduto.produto_id == produto.id)
                .join(Fornecedor, OfertaProduto.fornecedor_id == Fornecedor.id)
                .order_by(OfertaProduto.preco_ofertado)
            ).all()
            
            if not ofertas:
                return json.dumps({
                    "sku": sku,
                    "produto": produto.nome,
                    "ofertas": [],
                    "mensagem": "Nenhuma oferta encontrada para este produto"
                }, ensure_ascii=False)
            
            # Formatar ofertas
            ofertas_formatadas = []
            for oferta, fornecedor in ofertas:
                ofertas_formatadas.append({
                    "fornecedor": fornecedor.nome,
                    "preco": float(oferta.preco_ofertado),
                    "confiabilidade": fornecedor.confiabilidade,
                    "prazo_entrega_dias": fornecedor.prazo_entrega_dias,
                    "estoque_disponivel": oferta.estoque_disponivel,
                    "score_qualidade": round(fornecedor.confiabilidade * 100, 1),
                    "custo_por_dia": round(float(oferta.preco_ofertado) / fornecedor.prazo_entrega_dias, 2)
                })
            
            # Calcular melhor oferta (balance pre√ßo vs confiabilidade)
            if ofertas_formatadas:
                melhor_oferta = min(
                    ofertas_formatadas,
                    key=lambda x: x["preco"] * (2 - x["confiabilidade"])  # Penaliza baixa confiabilidade
                )
            else:
                melhor_oferta = None
            
            return json.dumps({
                "sku": sku,
                "produto": produto.nome,
                "total_ofertas": len(ofertas_formatadas),
                "ofertas": ofertas_formatadas,
                "melhor_oferta": melhor_oferta,
                "preco_medio": round(sum(o["preco"] for o in ofertas_formatadas) / len(ofertas_formatadas), 2) if ofertas_formatadas else 0
            }, ensure_ascii=False)
            
    except Exception as e:
        return json.dumps({"error": str(e)}, ensure_ascii=False)


def run_full_purchase_analysis(sku: str, reason: str = "reposi√ß√£o de estoque") -> str:
    """
    Use esta ferramenta para perguntas complexas que exigem uma recomenda√ß√£o 
    de compra completa, como 'Devo comprar o produto X?', 'Analise a necessidade 
    de reposi√ß√£o para o SKU Y', ou 'Fa√ßa uma recomenda√ß√£o de compra completa para Z'.
    
    Esta ferramenta delega a an√°lise ao Time de Especialistas da Cadeia de Suprimentos.
    
    Args:
        sku: SKU do produto a analisar
        reason: Motivo da an√°lise (padr√£o: "reposi√ß√£o de estoque")
    
    Returns:
        An√°lise completa com recomenda√ß√£o de compra formatada em markdown
    """
    try:
        print(f"üè¢ [Delega√ß√£o] Acionando Time de Especialistas para {sku}...")
        
        # Importa√ß√£o tardia para evitar import circular
        from app.agents.supply_chain_team import run_supply_chain_analysis
        
        query = f"Analise a necessidade de compra do produto {sku} para {reason}"
        result = run_supply_chain_analysis(query)
        
        print(f"‚úÖ [Delega√ß√£o] Time completou an√°lise. Resultado: {result.get('decision', 'N/A')}")
        print(f"üîç [Debug] Dados completos do resultado: {result}")
        
        # Extrai TODOS os dados dispon√≠veis
        decision = result.get("decision", "manual_review")
        supplier = result.get("supplier", "N/A")
        price = result.get("price", 0)
        currency = result.get("currency", "BRL")
        quantity = result.get("quantity_recommended", 0)
        rationale = result.get("rationale", "An√°lise em andamento...")
        risk = result.get("risk_assessment", "")
        next_steps = result.get("next_steps", [])
        
        # Extrai dados dos sub-agentes (se dispon√≠vel)
        need_restock = result.get("need_restock", None)
        forecast_notes = result.get("forecast_notes", "")
        market_prices = result.get("market_prices", [])
        logistics_analysis = result.get("logistics_analysis", {})
        selected_offer = logistics_analysis.get("selected_offer") if isinstance(logistics_analysis, dict) else None
        
        # Monta resposta formatada SEMPRE mostrando os dados dispon√≠veis
        response = f"## üìä An√°lise Completa de Compra - {sku}\n\n"
        
        # Cabe√ßalho com decis√£o
        if decision == "approve":
            response += "### ‚úÖ RECOMENDA√á√ÉO: APROVAR COMPRA\n\n"
        elif decision == "reject":
            response += "### ‚ùå RECOMENDA√á√ÉO: N√ÉO COMPRAR\n\n"
        else:
            response += "### ‚ö†Ô∏è AN√ÅLISE COMPLETA (Requer Decis√£o Final)\n\n"
        
        # Dados do fornecedor (se dispon√≠vel)
        if supplier and supplier != "N/A":
            response += f"**Fornecedor Recomendado:** {supplier}\n"
            if price > 0:
                response += f"**Pre√ßo Unit√°rio:** {currency} {price:.2f}\n"
                if quantity > 0:
                    response += f"**Quantidade Sugerida:** {quantity} unidades\n"
                    response += f"**Valor Total:** {currency} {price * quantity:.2f}\n"
            response += "\n"
        elif selected_offer:
            response += f"**Melhor Oferta Encontrada:**\n"
            response += f"- Fornecedor: {selected_offer.get('source', 'N/A')}\n"
            response += f"- Pre√ßo: {currency} {selected_offer.get('price', 0):.2f}\n"
            if 'delivery_time_days' in selected_offer:
                response += f"- Prazo: {selected_offer.get('delivery_time_days')} dias\n"
            response += "\n"
        
        # An√°lise de necessidade
        if need_restock is not None:
            status = "‚úÖ Necessita reposi√ß√£o" if need_restock else "‚è∏Ô∏è Estoque adequado"
            response += f"**Status de Estoque:** {status}\n\n"
        
        # Ofertas de mercado encontradas
        if market_prices and len(market_prices) > 0:
            response += f"**Ofertas Encontradas:** {len(market_prices)} fornecedores\n"
            for idx, offer in enumerate(market_prices[:3], 1):  # Top 3
                if isinstance(offer, dict):
                    response += f"{idx}. {offer.get('fornecedor', offer.get('source', 'N/A'))}: "
                    response += f"{currency} {offer.get('preco', offer.get('price', 0)):.2f}\n"
            response += "\n"
        
        # Justificativa (sempre mostrar)
        if rationale:
            response += f"**An√°lise e Justificativa:**\n{rationale}\n\n"
        
        if forecast_notes:
            response += f"**Notas de Previs√£o:**\n{forecast_notes}\n\n"
        
        # Avalia√ß√£o de risco
        if risk:
            response += f"**Avalia√ß√£o de Risco:**\n{risk}\n\n"
        
        # Pr√≥ximos passos
        if next_steps and len(next_steps) > 0:
            response += "**Pr√≥ximos Passos:**\n"
            for step in next_steps:
                response += f"- {step}\n"
        else:
            # Adiciona passos padr√£o se n√£o houver
            response += "**Pr√≥ximos Passos:**\n"
            response += "- Revisar an√°lise detalhada acima\n"
            response += "- Validar disponibilidade de or√ßamento\n"
            response += "- Contatar fornecedor selecionado\n"
        
        return response
        
    except Exception as e:
        error_msg = f"‚ùå Erro ao executar an√°lise do time: {str(e)}"
        print(error_msg)
        import traceback
        traceback.print_exc()
        return error_msg


# Fun√ß√µes auxiliares mantidas para compatibilidade
def lookup_product(sku: str) -> Dict[str, Any]:
    """Fun√ß√£o auxiliar para compatibilidade - usa o toolkit."""
    toolkit = SupplyChainToolkit()
    result_str = toolkit.lookup_product(sku)
    return json.loads(result_str)


def load_demand_forecast(sku: str, horizon_days: int = DEFAULT_FORECAST_HORIZON) -> Dict[str, Any]:
    """Fun√ß√£o auxiliar para compatibilidade - usa o toolkit."""
    toolkit = SupplyChainToolkit()
    result_str = toolkit.load_demand_forecast(sku, horizon_days)
    return json.loads(result_str)
