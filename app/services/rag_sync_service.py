"""
Servi√ßo de Sincroniza√ß√£o Autom√°tica do RAG com Banco de Dados.

Este servi√ßo garante que o ChromaDB esteja sempre sincronizado com o banco MySQL,
reindexando automaticamente quando houver mudan√ßas nos produtos.

FUNCIONAMENTO:
==============
1. Na inicializa√ß√£o: Indexa todos os produtos do banco
2. Em atualiza√ß√µes: Re-indexa substituindo dados antigos (sem acumular)
3. Sempre limpa antes de reindexar para manter dados frescos

MODELOS UTILIZADOS:
===================
‚Ä¢ Embeddings: Google text-embedding-004 (768 dimens√µes)
‚Ä¢ LLM RAG: Gemini 2.5 Flash

Autor: Sistema de Automa√ß√£o de Compras
Data: 2025-10-14
"""

from __future__ import annotations
import logging
from datetime import datetime
from pathlib import Path
import shutil
from typing import Optional

from sqlmodel import Session, select
from app.models.models import Produto
from app.core.database import engine

logger = logging.getLogger(__name__)

# Diret√≥rio do ChromaDB
CHROMA_DIR = Path(__file__).resolve().parents[2] / "data" / "chroma"


class RAGSyncService:
    """
    Servi√ßo de sincroniza√ß√£o autom√°tica entre MySQL e ChromaDB.
    
    Respons√°vel por manter o vector store sempre atualizado com os produtos
    do banco de dados, sem ac√∫mulo de dados antigos.
    """
    
    def __init__(self):
        """Inicializa o servi√ßo de sincroniza√ß√£o."""
        self.last_sync: Optional[datetime] = None
        self.total_products_indexed: int = 0
        self.is_initialized: bool = False
    
    def clear_vector_store(self) -> None:
        """
        Limpa completamente o ChromaDB para evitar ac√∫mulo de dados.
        
        IMPORTANTE: Sempre executado antes de reindexar para garantir
        que apenas dados atuais estejam no vector store.
        """
        try:
            if CHROMA_DIR.exists():
                logger.info(f"üóëÔ∏è Limpando ChromaDB antigo: {CHROMA_DIR}")
                shutil.rmtree(CHROMA_DIR)
                logger.info("‚úÖ ChromaDB limpo com sucesso")
            else:
                logger.info("üìÇ ChromaDB n√£o existe ainda, ser√° criado na indexa√ß√£o")
        except Exception as e:
            logger.error(f"‚ùå Erro ao limpar ChromaDB: {e}")
            raise
    
    def sync_full_catalog(self, force_clear: bool = True) -> dict:
        """
        Sincroniza o cat√°logo completo de produtos do banco para o ChromaDB.
        
        Args:
            force_clear: Se True, limpa ChromaDB antes de indexar (padr√£o: True)
                        Isso evita ac√∫mulo de dados antigos.
        
        Returns:
            dict: Estat√≠sticas da sincroniza√ß√£o
            
        Raises:
            Exception: Se houver erro na indexa√ß√£o
        """
        start_time = datetime.now()
        
        try:
            # 1. Limpar vector store antigo (sem ac√∫mulo)
            if force_clear:
                self.clear_vector_store()
            
            # 2. Carregar produtos do banco
            with Session(engine) as session:
                products = session.exec(select(Produto)).all()
                product_count = len(products)
                
                if product_count == 0:
                    logger.warning("‚ö†Ô∏è Nenhum produto encontrado no banco de dados")
                    return {
                        "status": "warning",
                        "message": "Nenhum produto para indexar",
                        "products_indexed": 0,
                        "duration_seconds": 0
                    }
                
                logger.info(f"üì¶ Encontrados {product_count} produtos no banco")
                
                # 3. Indexar produtos no ChromaDB
                from app.services.rag_service import index_product_catalog
                
                logger.info("üöÄ Iniciando indexa√ß√£o no ChromaDB...")
                index_product_catalog(session)
                
                # 4. Atualizar estat√≠sticas
                self.last_sync = datetime.now()
                self.total_products_indexed = product_count
                self.is_initialized = True
                
                duration = (datetime.now() - start_time).total_seconds()
                
                logger.info(f"‚úÖ Sincroniza√ß√£o conclu√≠da: {product_count} produtos em {duration:.2f}s")
                
                return {
                    "status": "success",
                    "message": f"ChromaDB sincronizado com sucesso",
                    "products_indexed": product_count,
                    "duration_seconds": round(duration, 2),
                    "synced_at": self.last_sync.isoformat(),
                    "chroma_dir": str(CHROMA_DIR)
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro na sincroniza√ß√£o do RAG: {e}")
            import traceback
            traceback.print_exc()
            
            return {
                "status": "error",
                "message": f"Erro na sincroniza√ß√£o: {str(e)}",
                "products_indexed": 0,
                "duration_seconds": 0
            }
    
    def sync_product_update(self, product_id: int) -> dict:
        """
        Sincroniza atualiza√ß√£o de um produto espec√≠fico.
        
        NOTA: Por enquanto, re-indexa todo o cat√°logo para garantir consist√™ncia.
        Em vers√µes futuras, pode ser otimizado para atualiza√ß√£o incremental.
        
        Args:
            product_id: ID do produto atualizado
            
        Returns:
            dict: Resultado da sincroniza√ß√£o
        """
        logger.info(f"üîÑ Produto {product_id} atualizado, re-sincronizando cat√°logo...")
        return self.sync_full_catalog(force_clear=True)
    
    def sync_product_delete(self, product_id: int) -> dict:
        """
        Sincroniza exclus√£o de um produto.
        
        Remove o produto do ChromaDB re-indexando todo o cat√°logo.
        
        Args:
            product_id: ID do produto deletado
            
        Returns:
            dict: Resultado da sincroniza√ß√£o
        """
        logger.info(f"üóëÔ∏è Produto {product_id} deletado, re-sincronizando cat√°logo...")
        return self.sync_full_catalog(force_clear=True)
    
    def get_sync_status(self) -> dict:
        """
        Retorna o status atual da sincroniza√ß√£o.
        
        Returns:
            dict: Informa√ß√µes sobre o estado da sincroniza√ß√£o
        """
        return {
            "is_initialized": self.is_initialized,
            "last_sync": self.last_sync.isoformat() if self.last_sync else None,
            "total_products_indexed": self.total_products_indexed,
            "chroma_dir_exists": CHROMA_DIR.exists(),
            "chroma_dir_path": str(CHROMA_DIR)
        }


# Inst√¢ncia global do servi√ßo (singleton)
rag_sync_service = RAGSyncService()


def initialize_rag_on_startup() -> dict:
    """
    Fun√ß√£o helper para inicializa√ß√£o do RAG no startup da aplica√ß√£o.
    
    Esta fun√ß√£o deve ser chamada no evento @app.on_event("startup") do FastAPI.
    
    Returns:
        dict: Resultado da inicializa√ß√£o
    """
    logger.info("=" * 80)
    logger.info("üöÄ INICIALIZANDO RAG AUTOM√ÅTICO")
    logger.info("=" * 80)
    
    result = rag_sync_service.sync_full_catalog(force_clear=True)
    
    if result["status"] == "success":
        logger.info("=" * 80)
        logger.info("‚úÖ RAG INICIALIZADO COM SUCESSO")
        logger.info(f"   ‚Ä¢ Produtos indexados: {result['products_indexed']}")
        logger.info(f"   ‚Ä¢ Tempo: {result['duration_seconds']}s")
        logger.info(f"   ‚Ä¢ ChromaDB: {result['chroma_dir']}")
        logger.info("=" * 80)
    else:
        logger.error("=" * 80)
        logger.error("‚ùå FALHA NA INICIALIZA√á√ÉO DO RAG")
        logger.error(f"   ‚Ä¢ Erro: {result['message']}")
        logger.error("=" * 80)
    
    return result


def trigger_rag_sync() -> dict:
    """
    Trigger manual para sincroniza√ß√£o do RAG.
    
    Pode ser chamado via endpoint API ou manualmente quando necess√°rio.
    
    Returns:
        dict: Resultado da sincroniza√ß√£o
    """
    logger.info("üîÑ Sincroniza√ß√£o manual do RAG acionada")
    return rag_sync_service.sync_full_catalog(force_clear=True)
