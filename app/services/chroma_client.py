"""
Singleton para gerenciar inst√¢ncia √∫nica do ChromaDB.

Este m√≥dulo resolve o erro "An instance of Chroma already exists with different settings"
garantindo que apenas uma inst√¢ncia do cliente ChromaDB seja criada e reutilizada
em toda a aplica√ß√£o.

PROBLEMA RESOLVIDO:
===================
Antes: M√∫ltiplas inst√¢ncias do ChromaDB eram criadas com configura√ß√µes potencialmente
diferentes, causando conflitos.

Solu√ß√£o: Padr√£o Singleton que garante uma √∫nica inst√¢ncia compartilhada do
PersistentClient do ChromaDB.

REFER√äNCIAS:
- ChromaDB Issue #1302: https://github.com/chroma-core/chroma/issues/1302
- Documenta√ß√£o ChromaDB: https://docs.trychroma.com/

Autor: Sistema de Automa√ß√£o de Compras
Data: 2025-10-16
"""

from __future__ import annotations
import os
from pathlib import Path
from typing import Optional
import chromadb
from chromadb.config import Settings


class ChromaClientSingleton:
    """
    Singleton para gerenciar inst√¢ncia √∫nica do ChromaDB PersistentClient.
    
    Garante que apenas uma inst√¢ncia do cliente seja criada, evitando o erro:
    "An instance of Chroma already exists with different settings"
    """
    
    _instance: Optional[chromadb.PersistentClient] = None
    _persist_directory: Optional[str] = None
    
    @classmethod
    def get_client(cls, persist_directory: Optional[str] = None) -> chromadb.PersistentClient:
        """
        Retorna a inst√¢ncia √∫nica do ChromaDB PersistentClient.
        
        Args:
            persist_directory: Diret√≥rio para persistir os dados do ChromaDB.
                              Se None, usa o diret√≥rio padr√£o do projeto.
        
        Returns:
            chromadb.PersistentClient: Inst√¢ncia √∫nica do cliente ChromaDB
            
        Raises:
            ValueError: Se tentar mudar o diret√≥rio ap√≥s a primeira inicializa√ß√£o
        """
        # Define diret√≥rio padr√£o se n√£o fornecido
        if persist_directory is None:
            persist_directory = str(
                Path(__file__).resolve().parents[2] / "data" / "chroma"
            )
        
        # Verifica se est√° tentando mudar o diret√≥rio ap√≥s inicializa√ß√£o
        if cls._instance is not None and cls._persist_directory != persist_directory:
            raise ValueError(
                f"Tentativa de mudar diret√≥rio do ChromaDB ap√≥s inicializa√ß√£o.\n"
                f"Diret√≥rio atual: {cls._persist_directory}\n"
                f"Novo diret√≥rio solicitado: {persist_directory}\n"
                f"Reinicie a aplica√ß√£o para mudar o diret√≥rio."
            )
        
        # Cria inst√¢ncia apenas na primeira chamada
        if cls._instance is None:
            cls._persist_directory = persist_directory
            
            # Garante que o diret√≥rio existe
            Path(persist_directory).mkdir(parents=True, exist_ok=True)
            
            # Cria cliente com configura√ß√µes consistentes
            cls._instance = chromadb.PersistentClient(
                path=persist_directory,
                settings=Settings(
                    anonymized_telemetry=False,
                    allow_reset=True
                )
            )
            
            print(f"‚úÖ ChromaDB PersistentClient inicializado: {persist_directory}")
        
        return cls._instance
    
    @classmethod
    def reset_client(cls) -> None:
        """
        Reseta a inst√¢ncia do cliente (√∫til para testes ou reinicializa√ß√£o).
        
        ATEN√á√ÉO: Use com cuidado! Isso for√ßa a cria√ß√£o de uma nova inst√¢ncia.
        """
        if cls._instance is not None:
            print(f"üîÑ Resetando ChromaDB client: {cls._persist_directory}")
            cls._instance = None
            cls._persist_directory = None
    
    @classmethod
    def get_persist_directory(cls) -> Optional[str]:
        """
        Retorna o diret√≥rio de persist√™ncia atual.
        
        Returns:
            str: Caminho do diret√≥rio ou None se n√£o inicializado
        """
        return cls._persist_directory


# Fun√ß√£o helper para compatibilidade com c√≥digo existente
def get_chroma_client(persist_directory: Optional[str] = None) -> chromadb.PersistentClient:
    """
    Fun√ß√£o helper para obter o cliente ChromaDB singleton.
    
    Args:
        persist_directory: Diret√≥rio para persistir os dados (opcional)
    
    Returns:
        chromadb.PersistentClient: Inst√¢ncia √∫nica do cliente
    """
    return ChromaClientSingleton.get_client(persist_directory)
