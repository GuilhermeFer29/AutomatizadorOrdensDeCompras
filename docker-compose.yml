services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    volumes:
      - ./app:/app/app  # Removido :ro para permitir gravação
      - ./scripts:/app/scripts  # Removido :ro para permitir gravação
      - ./data:/app/data  # Removido :ro para permitir gravação
      - models_data:/models
      - reports_data:/reports

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      broker:
        condition: service_healthy
    command: celery -A app.core.celery_app.celery_app worker --loglevel=info
    volumes:
      - ./app:/app/app  # Removido :ro para permitir gravação
      - ./scripts:/app/scripts  # Removido :ro para permitir gravação
      - ./data:/app/data  # Removido :ro para permitir gravação
      - models_data:/models
      - reports_data:/reports

  beat:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      broker:
        condition: service_healthy
      db:
        condition: service_healthy
    command: celery -A app.core.celery_app.celery_app beat --loglevel=info
    volumes:
      - ./app:/app/app  # Removido :ro para permitir gravação
      - ./scripts:/app/scripts  # Removido :ro para permitir gravação

  db:
    image: mysql:8.0
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - postgres_data:/var/lib/mysql
    command: --host-cache-size=0
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$${MYSQL_ROOT_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s

  broker:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 3s
      retries: 5

volumes:
  postgres_data:
  models_data:
  reports_data:

