"""
Gera√ß√£o de dados sint√©ticos de alta fidelidade para treinamento de modelos de ML.

Este script gera hist√≥rico realista de pre√ßos e vendas com:
- Tend√™ncias temporais
- Sazonalidade (anual, semanal, datas comemorativas)
- Correla√ß√£o entre pre√ßo e demanda
- Ru√≠do natural do mercado
- Padr√µes de fins de semana e feriados

ARQUITETURA:
============
‚úÖ 365 dias de hist√≥rico m√≠nimo por produto
‚úÖ Modelagem de sazonalidade com fun√ß√µes trigonom√©tricas
‚úÖ Correla√ß√£o negativa pre√ßo-demanda
‚úÖ Picos em datas comemorativas brasileiras
‚úÖ Dados marcados como sint√©ticos (is_synthetic=True)
"""

from __future__ import annotations

import sys
from datetime import datetime, timedelta, timezone
from decimal import Decimal
from pathlib import Path
from typing import List, Tuple

import numpy as np
from sqlmodel import Session, select

# Setup path para imports
PROJECT_ROOT = Path(__file__).resolve().parents[1]
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

from app.core.database import engine
from app.models.models import PrecosHistoricos, Produto, VendasHistoricas

# Configura√ß√µes
DAYS_OF_HISTORY = 365
RANDOM_SEED = 42

# Datas comemorativas brasileiras (aproximadas para qualquer ano)
COMMEMORATIVE_DATES = [
    (1, 1),   # Ano Novo
    (2, 14),  # Dia dos Namorados
    (3, 8),   # Dia das Mulheres
    (5, 12),  # Dia das M√£es (aproximado, 2¬∫ domingo de maio)
    (6, 12),  # Dia dos Namorados
    (8, 11),  # Dia dos Pais (aproximado, 2¬∫ domingo de agosto)
    (10, 12), # Dia das Crian√ßas
    (11, 2),  # Finados
    (11, 15), # Proclama√ß√£o da Rep√∫blica
    (11, 25), # Black Friday (aproximado)
    (12, 25), # Natal
]


def _is_weekend(date: datetime) -> bool:
    """Verifica se a data √© fim de semana."""
    return date.weekday() >= 5  # S√°bado = 5, Domingo = 6


def _is_commemorative(date: datetime, tolerance_days: int = 7) -> bool:
    """Verifica se a data est√° pr√≥xima de uma data comemorativa."""
    # Remover timezone para compara√ß√£o (se houver)
    date_naive = date.replace(tzinfo=None) if date.tzinfo else date
    
    for month, day in COMMEMORATIVE_DATES:
        comm_date = datetime(date_naive.year, month, day)
        delta = abs((date_naive - comm_date).days)
        if delta <= tolerance_days:
            return True
    return False


def _generate_price_series(
    produto: Produto,
    start_date: datetime,
    days: int,
    seed: int,
) -> List[Tuple[datetime, float]]:
    """
    Gera s√©rie temporal de pre√ßos com tend√™ncia, sazonalidade e ru√≠do.
    
    Componentes:
    - Pre√ßo base: Derivado do ID do produto
    - Tend√™ncia: Crescimento linear leve
    - Sazonalidade anual: Ciclo senoidal
    - Sazonalidade semanal: Pequenos picos em fins de semana
    - Picos em datas comemorativas: Aumento de 5-15%
    - Ru√≠do: Varia√ß√£o di√°ria aleat√≥ria de ¬±3%
    """
    np.random.seed(seed + produto.id)
    
    # Pre√ßo base (variando entre R$ 50 e R$ 500 baseado no ID)
    base_price = 50.0 + (produto.id % 10) * 45.0
    
    prices = []
    
    # Iniciar com pre√ßo base (pre√ßo do dia 0)
    current_price = base_price
    
    for day in range(days):
        current_date = start_date + timedelta(days=day)
        t = day / days  # Tempo normalizado [0, 1]
        
        # 1. Tend√™ncia SUAVE: +0.02% por dia (+7.3% ao ano)
        trend_factor = 1.0002  # Crescimento di√°rio de 0.02%
        
        # 2. Sazonalidade anual (MUITO SUTIL)
        annual_cycle = 0.015 * np.sin(2 * np.pi * t)  # ¬±1.5% ao longo do ano
        
        # 3. Varia√ß√£o de fim de semana (M√çNIMA)
        weekend_variation = 0.0
        if _is_weekend(current_date):
            weekend_variation = np.random.uniform(-0.005, 0.01)  # -0.5% a +1%
        
        # 4. Datas comemorativas (MODERADO)
        commemorative_boost = 0.0
        if _is_commemorative(current_date, tolerance_days=3):
            commemorative_boost = np.random.uniform(0.02, 0.05)  # +2% a +5%
        
        # 5. Ru√≠do di√°rio REALISTA (PEQUENO)
        # Random walk: movimento browniano com drift
        daily_change = np.random.normal(0, 0.015)  # ¬±1.5% desvio padr√£o
        
        # APLICAR MUDAN√áAS DE FORMA INCREMENTAL (Random Walk)
        # Novo pre√ßo = pre√ßo anterior √ó (1 + mudan√ßas pequenas)
        price_multiplier = (
            trend_factor *  # Tend√™ncia suave
            (1 + annual_cycle) *  # Ciclo anual
            (1 + weekend_variation) *  # Fim de semana
            (1 + commemorative_boost) *  # Datas especiais
            (1 + daily_change)  # Random walk
        )
        
        current_price = current_price * price_multiplier
        
        # Limites de sanidade (n√£o permite varia√ß√µes absurdas)
        current_price = np.clip(current_price, base_price * 0.7, base_price * 1.5)
        
        prices.append((current_date, round(float(current_price), 2)))
    
    return prices


def _generate_sales_series(
    produto: Produto,
    price_series: List[Tuple[datetime, float]],
    seed: int,
) -> List[Tuple[datetime, int, float]]:
    """
    Gera s√©rie temporal de vendas correlacionada com pre√ßos.
    
    Componentes:
    - Demanda base: Derivada do estoque m√≠nimo
    - Correla√ß√£o negativa com pre√ßo: Vendas caem quando pre√ßo sobe
    - Padr√£o semanal: Mais vendas nos fins de semana
    - Picos em datas comemorativas: Aumento de 30-80%
    - Ru√≠do: Varia√ß√£o di√°ria aleat√≥ria
    """
    np.random.seed(seed + produto.id + 1000)
    
    # Demanda base di√°ria (baseada no estoque m√≠nimo)
    base_demand = max(produto.estoque_minimo / 30, 5)  # M√≠nimo 5 unidades/dia
    
    # Calcular pre√ßo m√©dio da s√©rie
    avg_price = np.mean([price for _, price in price_series])
    
    sales = []
    
    for date, price in price_series:
        # 1. Correla√ß√£o negativa com pre√ßo (elasticidade-pre√ßo da demanda)
        price_ratio = price / avg_price
        price_effect = 1 / (price_ratio ** 0.5)  # Elasticidade de -0.5
        
        # 2. Padr√£o semanal (mais vendas nos fins de semana)
        weekend_boost = 1.4 if _is_weekend(date) else 1.0
        
        # 3. Picos em datas comemorativas
        commemorative_boost = 1.0
        if _is_commemorative(date):
            commemorative_boost = np.random.uniform(1.3, 1.8)  # +30% a +80%
        
        # 4. Ru√≠do di√°rio
        daily_noise = np.random.uniform(0.7, 1.3)
        
        # Quantidade de vendas
        quantity = base_demand * price_effect * weekend_boost * commemorative_boost * daily_noise
        quantity = max(int(round(quantity)), 0)  # Garantir n√£o-negativo
        
        # Receita
        revenue = float(quantity * price)
        
        sales.append((date, quantity, revenue))
    
    return sales


def generate_realistic_data(days: int = DAYS_OF_HISTORY, seed: int = RANDOM_SEED) -> dict:
    """
    Gera dados sint√©ticos realistas para todos os produtos no banco.
    
    Args:
        days: N√∫mero de dias de hist√≥rico a gerar
        seed: Seed para reprodutibilidade
    
    Returns:
        Dicion√°rio com estat√≠sticas da gera√ß√£o
    """
    print(f"üöÄ Iniciando gera√ß√£o de dados sint√©ticos ({days} dias)...")
    
    with Session(engine) as session:
        # Buscar todos os produtos
        produtos = list(session.exec(select(Produto)).all())
        
        if not produtos:
            print("‚ùå Nenhum produto encontrado no banco de dados.")
            print("   Execute 'python scripts/seed_database.py' primeiro.")
            return {"error": "no_products"}
        
        print(f"üì¶ Encontrados {len(produtos)} produtos para gerar hist√≥rico.")
        
        # Data de in√≠cio (365 dias atr√°s)
        end_date = datetime.now(timezone.utc).replace(hour=0, minute=0, second=0, microsecond=0)
        start_date = end_date - timedelta(days=days - 1)
        
        total_prices = 0
        total_sales = 0
        
        for idx, produto in enumerate(produtos, 1):
            print(f"  [{idx}/{len(produtos)}] Gerando dados para {produto.sku} ({produto.nome})...")
            
            # Gerar s√©rie de pre√ßos
            price_series = _generate_price_series(produto, start_date, days, seed)
            
            # Gerar s√©rie de vendas correlacionada
            sales_series = _generate_sales_series(produto, price_series, seed)
            
            # Inserir pre√ßos no banco
            for date, price in price_series:
                preco_historico = PrecosHistoricos(
                    produto_id=produto.id,
                    fornecedor="Fornecedor Sint√©tico",
                    preco=Decimal(str(price)),
                    moeda="BRL",
                    coletado_em=date,
                    is_synthetic=True,
                )
                session.add(preco_historico)
                total_prices += 1
            
            # Inserir vendas no banco
            for date, quantity, revenue in sales_series:
                venda_historica = VendasHistoricas(
                    produto_id=produto.id,
                    data_venda=date,
                    quantidade=quantity,
                    receita=Decimal(str(round(revenue, 2))),
                    criado_em=datetime.now(timezone.utc),
                )
                session.add(venda_historica)
                total_sales += 1
        
        # Commit em lote
        print("\nüíæ Salvando dados no banco...")
        session.commit()
        
        print("\n‚úÖ Gera√ß√£o conclu√≠da com sucesso!")
        print(f"üìä Estat√≠sticas:")
        print(f"   - Produtos processados: {len(produtos)}")
        print(f"   - Registros de pre√ßos: {total_prices:,}")
        print(f"   - Registros de vendas: {total_sales:,}")
        print(f"   - Per√≠odo: {start_date.date()} a {end_date.date()}")
        
        return {
            "success": True,
            "produtos": len(produtos),
            "precos": total_prices,
            "vendas": total_sales,
            "start_date": start_date.isoformat(),
            "end_date": end_date.isoformat(),
        }


def clear_synthetic_data() -> dict:
    """Remove todos os dados sint√©ticos do banco."""
    print("üóëÔ∏è  Removendo dados sint√©ticos existentes...")
    
    with Session(engine) as session:
        # Remover pre√ßos sint√©ticos
        precos_result = session.exec(
            select(PrecosHistoricos).where(PrecosHistoricos.is_synthetic == True)
        )
        precos_count = sum(1 for _ in precos_result)
        
        session.exec(
            "DELETE FROM precos_historicos WHERE is_synthetic = TRUE"
        )
        
        # Remover todas as vendas (assumindo que s√£o sint√©ticas se os pre√ßos s√£o)
        session.exec("DELETE FROM vendas_historicas")
        
        session.commit()
        
        print(f"‚úÖ Removidos {precos_count:,} registros de pre√ßos sint√©ticos")
        print(f"‚úÖ Removidos todos os registros de vendas")
        
        return {"precos_removed": precos_count}


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Gera dados sint√©ticos realistas para ML")
    parser.add_argument(
        "--days",
        type=int,
        default=DAYS_OF_HISTORY,
        help=f"N√∫mero de dias de hist√≥rico (padr√£o: {DAYS_OF_HISTORY})",
    )
    parser.add_argument(
        "--seed",
        type=int,
        default=RANDOM_SEED,
        help=f"Seed para reprodutibilidade (padr√£o: {RANDOM_SEED})",
    )
    parser.add_argument(
        "--clear",
        action="store_true",
        help="Remove dados sint√©ticos existentes antes de gerar novos",
    )
    
    args = parser.parse_args()
    
    if args.clear:
        clear_synthetic_data()
        print()
    
    result = generate_realistic_data(days=args.days, seed=args.seed)
    
    if result.get("error"):
        sys.exit(1)
